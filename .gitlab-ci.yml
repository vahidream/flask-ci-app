stages:
  - test
  - sast
  - secrets
  - image_scan
  - iac_scan
  - upload
  - docker_push
  - deploy

variables:
  DOCKER_IMAGE: "vahidevs/flask-ci-app"
  DEFECTDOJO_HOST: "192.168.11.147"
  KUBE_NAMESPACE: "flask-app"

test_job:
  stage: test
  image: python:3.11
  tags:
    - docker
  script:
    - pip install -r requirements.txt
    - pytest || true

bandit_scan:
  stage: sast
  image: python:3.11
  tags:
    - docker
  script:
    - pip install bandit
    - bandit -r app/ -f json -o bandit-report.json || true
  artifacts:
    paths:
      - bandit-report.json

semgrep_scan:
  stage: sast
  image: returntocorp/semgrep
  tags:
    - docker
  script:
    - semgrep scan --config auto --json > semgrep-report.json || true
  artifacts:
    paths:
      - semgrep-report.json

secret_scan:
  stage: secrets
  image:
    name: zricethezav/gitleaks
    entrypoint: [""]
  tags:
    - docker
  script:
    - gitleaks detect --source . --report-format=json --report-path=gitleaks-report.json || true
  artifacts:
    paths:
      - gitleaks-report.json

trivy_scan:
  stage: image_scan
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  allow_failure: true
  tags:
    - docker
  script:
    - trivy image --severity HIGH,CRITICAL --exit-code 0 --format json --output trivy-report.json $DOCKER_IMAGE:latest || true
  artifacts:
    paths:
      - trivy-report.json

checkov_scan:
  stage: iac_scan
  image:
    name: bridgecrew/checkov
    entrypoint: [""]
  tags:
    - docker
  script:
    - checkov -d . --output json > checkov-report.json || true
  artifacts:
    paths:
      - checkov-report.json

ansible_check:
  stage: iac_scan
  image: python:3.9
  tags:
    - docker
  before_script:
    - pip install checkov ansible-lint
  script:
    - checkov -d infrastructure/ansible --framework ansible --output json --output-file-path checkov-ansible-report.json || true
    - ansible-lint infrastructure/ansible/*.yml || true
  artifacts:
    paths:
      - checkov-ansible-report.json

upload_to_defectdojo:
  stage: upload
  image: curlimages/curl:latest
  tags:
    - docker
  script:
    - |
      curl -X POST "http://$DEFECTDOJO_HOST:8084/api/v2/import-scan/" \
      -H "Authorization: Token $DEFECTDOJO_API_TOKEN" \
      -F "scan_type=Container Scan" \
      -F "engagement=$DEFECTDOJO_ENGAGEMENT_ID" \
      -F "product_name=$DEFECTDOJO_PRODUCT_NAME" \
      -F "file=@trivy-report.json"
  dependencies:
    - trivy_scan
  artifacts:
    when: always

docker_push:
  stage: docker_push
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  tags:
    - docker
  before_script:
    - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin
  script:
    - docker build -t $DOCKER_IMAGE:latest .
    - docker push $DOCKER_IMAGE:latest

deploy:
  stage: deploy
  image: bitnami/kubectl:latest
  tags:
    - docker
  script:
    - echo "$KUBECONFIG_CONTENT" | base64 -d > kubeconfig.yaml
    - export KUBECONFIG=$PWD/kubeconfig.yaml
    - kubectl version --client
    - kubectl config get-contexts
    - kubectl create namespace $KUBE_NAMESPACE || true
    - kubectl apply -f postgres-all.yaml -n $KUBE_NAMESPACE
    - kubectl apply -f flask-deployment.yaml -n $KUBE_NAMESPACE
    - kubectl apply -f flask-service.yaml -n $KUBE_NAMESPACE

